#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
% recommended but missing
%\usepackage{orcidlink}
%\usepackage{thumbpdf}


 
\usepackage{amssymb} % Provides \checkmark
\end_preamble
\options format=acmsmall
\use_default_options false
\maintain_unincluded_children false
\begin_local_layout
InsetLayout Pkg 
    LyXType          Flex
    LabelString      Pkg
    LatexType        none
    Decoration       minimalist
    LabelFont        
        Color        blue
    EndFont
    MultiPar         false
    OptionalArgs     0
End

InsetLayout Proglang 
    LyXType          Flex
    LabelString      Proglang
    LatexType        none
    Decoration       minimalist
    LabelFont        
        Color        green
    EndFont
    MultiPar         false
    OptionalArgs     0
End
\end_local_layout
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "newcent" "default"
\font_sans "default" "default"
\font_typewriter "beramono" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 85 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_package amsmath 0
\use_package amssymb 0
\use_package cancel 0
\use_package esint 0
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plainurl
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\headheight 2.5cm
\headsep 2.5cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "basicstyle={\ttfamily\small},breaklines=false,columns=flexible,keepspaces=true,moredelim={**[is][\bfseries]{~}{~}}"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
User's Guide for UltimateKalman:
\begin_inset Newline newline
\end_inset

a Library for Flexible Kalman Filtering and Smoothing Using Orthogonal Transform
ations
\end_layout

\begin_layout Author
Sivan Toledo
\begin_inset Note Note
status open

\begin_layout Plain Layout
export to pdflatex and run the build script
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\linearestimator}{F}
{F}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\modelfun}{M}
{M}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\penaltyfun}{\phi}
{\phi}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\objectivefun}{\phi}
{\phi}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\grad}{\nabla}
{\nabla}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\hessian}[1][]{\nabla_{#1}^{2}}
{\nabla_{#1}^{2}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\jacobian}{\mathrm{J}}
{\mathrm{J}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\exact}[1]{#1}
{#1}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\estimate}[1]{\hat{#1}}
{\hat{#1}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\controlpoint}{\rho}
{\rho}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\location}{\ell}
{\ell}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\noise}{\epsilon}
{\epsilon}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\observations}{b}
{b}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\expectation}{\operatorname{E}}
{\mathrm{E}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\iu}{\mathbf{i}}
{\mathbf{i}}
\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
or use a dotless j?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\vecone}{\mathbf{1}}
{\mathbf{1}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\veczero}{\mathbf{0}}
{\mathbf{0}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\covold}{\text{cov}}
{\text{cov}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\nonjsscov}{\operatorname{cov}}
{\text{cov}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\cov}{\operatorname{cov}}
{\text{cov}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\var}{\text{var}}
{\text{var}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\fim}{\mathcal{I}}
{\mathcal{I}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\loglikelihood}{\mathcal{L}}
{\mathcal{L}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\score}{\mathcal{S}}
{\mathcal{S}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\duration}{\vartheta}
{\vartheta}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\attenuation}{a}
{a}
\end_inset


\begin_inset FormulaMacro
\newcommand{\cmplxatt}{\alpha}
{\alpha}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\initialphase}{\varphi}
{\varphi}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\satclockerr}{\eta}
{\eta}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\ionodelay}{\psi}
{\psi}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\tropodelay}{\xi}
{\xi}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\xcorr}{\operatorname{xcorr}}
{\text{xcorr}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\diag}{\operatorname{diag}}
{\text{diag}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\rank}{\operatorname{rank}}
{\text{rank}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\erf}{\operatorname{erf}}
{\text{erf}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\erfc}{\operatorname{erfc}}
{\text{erfc}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\range}{\operatorname{range}}
{\text{range}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\trace}{\operatorname{trace}}
{\text{trace}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\ops}{\operatorname{ops}}
{\text{ops}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\prob}{\operatorname{Prob}}
{\text{Prob}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\real}{\text{Re}}
{\text{Re}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\imag}{\text{Im}}
{\text{Im}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\square}{\text{\blacksquare}}
{\text{\blacksquare}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\irange}{\boldsymbol{:}}
{\boldsymbol{:}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
UltimateKalman
\end_layout

\end_inset

 is a library that implements efficient and flexible Kalman filtering and
 smoothing algorithms, including parallel (multi-core) smoothers.
 The library contains 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

, 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

, and 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 implementations (currently, the Java implementations does not contain all
 the algorithms).
 The library is robust: it includes mechanisms for testing and evaluating
 the performance of all the implementations, as well as with a set of well-docum
ented examples.
 The library is available on GitHub at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://github.com/sivantoledo/ultimate-kalman
\end_layout

\end_inset

.
 The release history of the library is as follows:
\end_layout

\begin_layout Itemize

\series bold
Release 1.2.0
\series default
 contains the sequential UltimateKalman algorithm, which is documented carefully
 in an article in the ACM Transactions on Mathematical Software
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "doi:10.1145/3699958"
literal "false"

\end_inset

.
 The algorithm is a slight extension an algorithm by Paige and Saunders
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "PaigeSaunders:1977:Kalman"
literal "false"

\end_inset

, which to the best of our knowledge, has not been implemented before.
 The algorithm uses orthogonal transformations so it has good numerical
 stability.
 The algorithm is implemented monolithically in all 3 languages.
 Please cite this article when citing the sequential UltimateKalman algorithm
 or its implementation.
 To use that version, please use the user guide from that release, not this
 document.
\end_layout

\begin_layout Itemize

\series bold
Release 2.0.0
\series default
 contains three additional algorithms in 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 and 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

, including two parallel-in-time smoothers, the Odd-Even smoother proposed
 in an article by Gargir and Toledo
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "toappear:IPDPS2025"
literal "false"

\end_inset

 and the smoother proposed by Särkkä and García-Fernández
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "10.1109/TAC.2020.2976316"
literal "false"

\end_inset

.
 The code in this release was used to perform the experiments reported by
 Gargir and Toledo
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "toappear:IPDPS2025"
literal "false"

\end_inset

; the release is meant mostly to document these experiments, not for adoption
 by users.
\end_layout

\begin_layout Itemize

\series bold
Release 2.1.0
\series default
 is a significantly cleaned up version of the codes described by Gargir
 and Toledo
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "toappear:IPDPS2025"
literal "false"

\end_inset

.
 It is meant to be adopted by users.
 This is the version described in this guide.
\begin_inset Newline newline
\end_inset

The 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 codes in this release use the same API as the implementation in Release
\begin_inset space ~
\end_inset

1.2.0, but the code has been split into multiple files so the build is more
 complicated.
 The 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 also retains the same API, but class names have changed.
 The 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 implementation is identical to the implementation in Release
\begin_inset space ~
\end_inset

1.2.0.
\end_layout

\begin_layout Standard
The implementation in each language is separate and does not rely on the
 others.
 The implementation includes 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 adapter classes that allow invocation of the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 and 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 implementations from 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

.
 This allows a single set of 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

example functions to invoke all three implementations.
 
\end_layout

\begin_layout Standard
The programming interfaces of all three implementations are similar.
 They offer exactly the same functionality using the same abstractions,
 and each employs good programming practices of the respected language.
 For example, the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 and 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 implementations use overloading (using the same method name more than once,
 with different argument lists).
 Another example is a method that returns two values in the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 implementation, but only one in the others; the second value is returned
 by a separate method or function in the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 and 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 implementations.
 The only differences are ones that are unavoidable due to the constraints
 of each programming language.
\end_layout

\begin_layout Standard
The 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 implementation does not rely on any 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 toolbox, only on functionality that is part of the core product.
 The implementation also works under 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
GNU Octave
\end_layout

\end_inset

.
 The 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 implementation relies on basic matrix and vector operations from the 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
BLAS
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "BLAS,BLAS3ALG"
literal "false"

\end_inset

 and on the QR and Cholesky factorizations from 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
LAPACK
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "LAPACK-UG"
literal "false"

\end_inset

.
 The 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 implementation of the parallel-in-time smoothers used the Threading Building
 Blocks (TBB) library to express shared-memory parallelism.
 TBB is a 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C++
\end_layout

\end_inset

 library and the code uses a single 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C++
\end_layout

\end_inset

 source file to expose the parallel primitives.
 The code can also be compiled without TBB, but this generates a sequential
 algorithm, not a multi-threaded (multi-core) one.
 The 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 implementation uses the Apache Commons Math library for both basic matrix-vecto
r operations and for the QR and Cholesky factorizations.
 The Cholesky factorization is used only to factor covariance matrices that
 are specified explicitly, as opposed to being specified by inverse factors
 or triangular factors.
\end_layout

\begin_layout Standard
We first describe how the different implementations represent matrices,
 vectors, and covariance matrices.
 Then we describe in detail the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 programming interface and implementation and then comment on the differences
 between them and those of the other two implementations.
 The guide ends with a discussion of the data structures that are used to
 represent the step sequence and a presentation of a mechanism for measuring
 the performance of the implementations.
\end_layout

\begin_layout Standard
The code has been tested with 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 R2021b (version 9.11) and R2024a, and with GNU 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
OCTAVE
\end_layout

\end_inset

 7.1.0, both running under Windows 11.
 The code has also been tested on Linux and on MacOS.
 Under Windows, 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 was configured to use Microsoft Visual C/C++ 2019 to compile C (mex) code.
 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
OCTAVE
\end_layout

\end_inset

 was configured to use mingw64 to compile C (mex) code.
 The code also compiles as a standalone 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 program under both 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
GCC
\end_layout

\end_inset

 and Microsoft Visual C/C++ 2022, as well as under 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 version 1.8 (also called version 8) and up.
\end_layout

\begin_layout Standard
The distribution archive contains a number of directories with scripts that
 build libraries, programs, and this document.
 The scripts for Windows are called 
\family typewriter
build.bat
\family default
.
 To run them, type 
\family typewriter
build
\family default
 on the Windows command prompt.
 The scripts for Linux and MacOS are called 
\family typewriter
build.sh
\family default
.
 To run them, type 
\family typewriter
./build.sh
\family default
 in a shell (terminal window).
 The 
\family typewriter
build.sh
\family default
 files must have permissions that allows them to execute as scripts; unpacking
 the distribution archive normally gives them this permission, but if you
 receive a 
\family typewriter
permission denied
\family default
 error message, give the file this premission using the command 
\family typewriter
chmod +x build.sh
\family default
 and try again.
\end_layout

\begin_layout Standard
The rest of this guild is organized as follows.
 Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:matrices-and-vectors"
plural "false"
caps "false"
noprefix "false"

\end_inset

 explains how vectors and matrices are represented in the three implementations.
 Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:covariance-matrices"
plural "false"
caps "false"
noprefix "false"

\end_inset

 explains how covariance matrices are represented.
 Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:matlab"
plural "false"
caps "false"
noprefix "false"

\end_inset

 presents the programming interface of the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 implementation and how to add it to 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

's search path.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:matrices-and-vectors"

\end_inset

The Representation of Vectors and Matrices
\end_layout

\begin_layout Standard
The 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 implementation uses native 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 matrices and vectors.
 The 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 implementation uses the types 
\family typewriter
RealMatrix
\family default
 and 
\family typewriter
RealVector
\family default
 from the 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
Apache Commons Math
\end_layout

\end_inset

 library
\begin_inset space ~
\end_inset

(both are interface types with multiple implementations).
 
\end_layout

\begin_layout Standard
The 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 implementation defines a type called 
\family typewriter
matrix_t
\family default
 to represent matrices and vectors.
 The implementation defines functions that implement basic operations of
 matrices and vectors of this type.
 The type is implemented using a structure that contains a pointer to an
 array of double-precision elements, which are stored columnwise as in the
 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
BLAS
\end_layout

\end_inset

 and 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
LAPACK
\end_layout

\end_inset

, and integers that describe the number of rows and columns in the matrix
 and the stride along rows (the so-called leading dimension in the 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
BLAS
\end_layout

\end_inset

 and 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
LAPACK
\end_layout

\end_inset

 interfaces).
 To avoid name-space pollution, in client code this type is called 
\family typewriter
kalman_matrix_t
\family default
.
\end_layout

\begin_layout Standard
State vectors are not always observable.
 This topic is explained in Section 
\begin_inset space ~
\end_inset

3.2 in the companion article.
 This situation usually arises when there are not enough observations to
 estimate the state.
 The function calls and methods that return estimates of state vectors and
 the covariance matrices of the estimates return in such cases a vector
 of 
\family typewriter
NaN
\family default
s (not-a-number, a floating point value that indicates that the value is
 not available) and a diagonal matrix whose diagonal elements are 
\family typewriter
NaN
\family default
.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:covariance-matrices"

\end_inset

The Representation of Covariance Matrices
\end_layout

\begin_layout Standard
Like all Kalman filters, 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
UltimateKalman
\end_layout

\end_inset

 consumes covariance matrices that describe the distribution of the error
 terms and produces covariance matrices that describe the uncertainty in
 the state estimates 
\begin_inset Formula $\estimate u_{i}$
\end_inset

.
 The input covariance matrices are not used explicitly; instead, the inverse
 factor 
\begin_inset Formula $W$
\end_inset

 of a covariance matrix 
\begin_inset Formula $C=(W^{T}W)^{-1}$
\end_inset

 is multiplied, not necessarily explicitly, by matrices or by a vector.
 
\end_layout

\begin_layout Standard
Therefore, the programming interface of 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
UltimateKalman
\end_layout

\end_inset

 expects input covariance matrices to be represented as objects belonging
 to a type with a method 
\family typewriter
weigh
\family default
 that multiplies the factor 
\begin_inset Formula $W$
\end_inset

 by a matrix 
\begin_inset Formula $A$
\end_inset

 or a vector 
\begin_inset Formula $v$
\end_inset

.
 In the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 and 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 implementations, this type is called 
\family typewriter
CovarianceMatrix
\family default
.
 The constructors of these classes accept many representations of a covariance
 matrix:
\end_layout

\begin_layout Itemize
An explicit covariance matrix 
\begin_inset Formula $C$
\end_inset

; the constructor computes an upper triangular Cholesky factor 
\begin_inset Formula $U$
\end_inset

 of 
\begin_inset Formula $C=U^{T}U$
\end_inset

 and implements 
\family typewriter
X=C.weigh(A)
\family default
 by solving 
\begin_inset Formula $UX=A$
\end_inset

.
\end_layout

\begin_layout Itemize
An inverse factor 
\begin_inset Formula $W$
\end_inset

 such that 
\begin_inset Formula $W^{T}W=C^{-1}$
\end_inset

; this factor is stored and multiplied by the argument of 
\family typewriter
weigh
\family default
.
\end_layout

\begin_layout Itemize
An inverse covariance matrix 
\begin_inset Formula $C^{-1}$
\end_inset

; the constructor computes its Cholesky factorization and stores the lower-trian
gular factor as 
\begin_inset Formula $W$
\end_inset

.
\end_layout

\begin_layout Itemize
A diagonal covariance matrix represented by a vector 
\begin_inset Formula $w$
\end_inset

 such that 
\begin_inset Formula $W=\text{diag}(w)$
\end_inset

 (the elements of 
\begin_inset Formula $w$
\end_inset

 are inverses of standard deviations).
\end_layout

\begin_layout Itemize
A few other, less important, variants.
\end_layout

\begin_layout Standard
In the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 implementation, the way that the argument to the constructor represents
 
\begin_inset Formula $C$
\end_inset

 is defined by a single-character argument (with values 
\family typewriter
C
\family default
, 
\family typewriter
W
\family default
, 
\family typewriter
I
\family default
, and 
\family typewriter
w
\family default
, respectively).
 In the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 implementation, 
\family typewriter
CovarianceMatrix
\family default
 is an interface with two implementing classes, 
\family typewriter
DiagonalCovarianceMatrix
\family default
 and 
\family typewriter
RealCovarianceMatrix
\family default
; the way that the numeric argument represents 
\begin_inset Formula $C$
\end_inset

 is specified using 
\family typewriter
enum
\family default
 constants defined in the implementation classes:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

RealCovarianceMatrix.Representation.COVARIANCE_MATRIX
\end_layout

\begin_layout Plain Layout

RealCovarianceMatrix.Representation.FACTOR
\end_layout

\begin_layout Plain Layout

RealCovarianceMatrix.Representation.INVERSE_FACTOR
\end_layout

\begin_layout Plain Layout

DiagonalCovarianceMatrix.Representation.COVARIANCE_MATRIX
\end_layout

\begin_layout Plain Layout

DiagonalCovarianceMatrix.Representation.DIAGONAL_VARIANCES
\end_layout

\begin_layout Plain Layout

DiagonalCovarianceMatrix.Representation.DIAGONAL_STANDARD_DEVIATIONS
\end_layout

\begin_layout Plain Layout

DiagonalCovarianceMatrix.Representation.DIAGONAL_INVERSE_STANDARD_DEVIATIONS
\end_layout

\end_inset

The 
\family typewriter
RealCovarianceMatrix
\family default
 class has a single constructor that takes a 
\family typewriter
RealMatrix
\family default
 and a representation constant.
 The 
\family typewriter
DiagonalCovarianceMatrix
\family default
 class several constructors that take either a 
\family typewriter
RealVector
\family default
, an array of 
\family typewriter
double
\family default
 values, or a single 
\family typewriter
double
\family default
 and a dimension (the covariance matrix is then a scaled identity); all
 also take as a second argument a representation constant.
\end_layout

\begin_layout Standard
Covariance input matrices are passed to the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 implementation in a similar manner, but without a class; each input covariance
 matrix is represented using two arguments, a matrix and a single character
 (
\family typewriter
C
\family default
, 
\family typewriter
W
\family default
, 
\family typewriter
I
\family default
, or 
\family typewriter
w
\family default
) that defines how the given matrix is related to 
\begin_inset Formula $C$
\end_inset

.
 
\end_layout

\begin_layout Standard
The UltimateKalman algorithm always returns the covariance matrix of 
\begin_inset Formula $\estimate u_{i}$
\end_inset

 as an upper triangular inverse factor 
\begin_inset Formula $W$
\end_inset

.
 The other algorithms return an explicit covariance matrix 
\begin_inset Formula $C$
\end_inset

.
 The 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 and 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 implementations return covariance matrices as objects of the 
\family typewriter
CovarianceMatrix
\family default
 type (always with an inverse-factor representation); the C implementation
 includes one function that returns the type of the covariance matrix (a
 single character) and another that returns the factor 
\begin_inset Formula $W$
\end_inset

 or the explicit matrix 
\begin_inset Formula $C$
\end_inset

.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:matlab"

\end_inset

The MATLAB Programming Interface
\end_layout

\begin_layout Standard
The 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 implementation resides in the 
\family typewriter
matlab
\family default
 directory of the distribution archive.
 To be able to use it, you must add this directory to your 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 search path using 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

's 
\family typewriter
addpath
\family default
 command.
 
\end_layout

\begin_layout Standard
The 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 implementation is object oriented and is implemented as a collection of
 handle (reference) classes called 
\family typewriter
KalmanUltimate
\family default
, 
\family typewriter
KalmanConventional
\family default
, 
\family typewriter
KalmanOddevenSmoother
\family default
, 
\family typewriter
KalmanAssociativeSmoother
\family default
, and 
\family typewriter
KalmanSparse
\family default
.
 The first four classes implement, respectively, the UltimateKalman algorithm
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "doi:10.1145/3699958,PaigeSaunders:1977:Kalman"
literal "false"

\end_inset

, a conventional Kalman filter
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "Kalman:1960:KalmanFilter"
literal "false"

\end_inset

 and RTS smoother
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "10.2514/3.3166"
literal "false"

\end_inset

, the Gargir-Toledo parallel smoother
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "toappear:IPDPS2025"
literal "false"

\end_inset

, and the parallel smoother by Särkkä and García-Fernández
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "10.1109/TAC.2020.2976316"
literal "false"

\end_inset

.
 The fifth implementation, 
\family typewriter
KalmanSparse
\family default
, uses an explicit sparse QR factorizations to filter and smooth; it is
 inefficient, especially when filtering, and is meant only for testing the
 correctness of other implementations.
 It is particularly simple and therefore it is particularly easy to ensure
 that it is correct.
 The interface of all these classes is exactly the same.
 The constructor takes one optional argument, a structure that specifies
 algorithmic options.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

kalman = KalmanUltimate(options)
\end_layout

\end_inset

or
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

kalman = KalmanUltimate()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The (overloaded) methods that advance the filter through a sequence of steps
 are 
\family typewriter
evolve
\family default
 and 
\family typewriter
observe
\family default
.
 Each of them must be called exactly once at each step, in this order.
 The 
\family typewriter
evolve
\family default
 method declares the dimension of the state of the next step and provides
 all the known quantities of the evolution equation, 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

kalman.evolve(n_i, H_i, F_i, c_i, K_i)
\end_layout

\end_inset

where 
\family typewriter
n_i
\family default
 is an integer, the dimension of the state, 
\family typewriter
H_i
\family default
 and 
\family typewriter
F_i
\family default
 are matrices, 
\family typewriter
c_i
\family default
 is a vector, and 
\family typewriter
K_i
\family default
 is a 
\family typewriter
CovarianceMatrix
\family default
 object.
 The number of rows in
\family typewriter
 H_i
\family default
, 
\family typewriter
F_i
\family default
, and 
\family typewriter
c_i
\family default
 must be the same and must be equal to the order of 
\family typewriter
K_i
\family default
; this is the number 
\begin_inset Formula $\ell_{i}$
\end_inset

 of scalar evolution equations.
 The number of columns in 
\family typewriter
H_i
\family default
 must be 
\family typewriter
n_i
\family default
 and the number of columns in 
\family typewriter
F_i
\family default
 must be equal to the dimension of the previous step.
 A simplified overloaded version defines 
\family typewriter
H_i
\family default
 internally as an 
\begin_inset Formula $n_{i}$
\end_inset

-by-
\begin_inset Formula $n_{i-1}$
\end_inset

 identity matrix, possibly padded with zero columns
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

kalman.evolve(n_i, F_i, c_i, K_i)
\end_layout

\end_inset

If 
\begin_inset Formula $n_{i}>\ell_{i}$
\end_inset

, this overloaded version adds the new parameters to the end of the state
 vector.
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $n_{i}<\ell_{i}$
\end_inset

, the first version must be used; this forces the user to specify how parameters
 in 
\begin_inset Formula $u_{i-1}$
\end_inset

 are mapped to the parameters in 
\begin_inset Formula $u_{i}$
\end_inset

.
 The 
\family typewriter
evolve
\family default
 method must be called even in the first step; this design decision was
 taken mostly to keep the implementation of all the steps in client code
 uniform.
 In the first step, there is no evolution equation, so the user can pass
 empty matrices to the method, or call another simplified overloaded version:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

kalman.evolve(n_i)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
observe
\family default
 method comes in two overloaded versions.
 One of them must be called to complete the definition of a step.
 The first version describes the observation equation and the second tells
 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
UltimateKalman
\end_layout

\end_inset

 that there are no observations of this step.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

kalman.observe(G_i, o_i, C_i)
\end_layout

\begin_layout Plain Layout

kalman.observe()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Steps are named using zero-based integer indices; the first step that is
 defined is step
\begin_inset space ~
\end_inset


\begin_inset Formula $i=0$
\end_inset

, the next is step
\begin_inset space ~
\end_inset


\begin_inset Formula $1$
\end_inset

, and so on.
 The 
\family typewriter
estimate
\family default
 methods return the estimate of the state at step 
\family typewriter
i
\family default
 and optionally the covariance matrix of that estimate, or the estimate
 and covariance of the latest step that is still in memory (normally the
 last step that was observed):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[estimate, covariance] = kalman.estimate(i)
\end_layout

\begin_layout Plain Layout

[estimate, covariance] = kalman.estimate()
\end_layout

\end_inset

If a step is not observable, 
\family typewriter
estimate
\family default
 returns a vector of 
\begin_inset Formula $n_{i}$
\end_inset

 
\family typewriter
NaN
\family default
s (not-a-number, an IEEE-754 floating point representation of an unknown
 quantity).
 
\end_layout

\begin_layout Standard
The 
\family typewriter
forget
\family default
 methods delete from memory the representation of all the steps up to and
 including 
\begin_inset Formula $i$
\end_inset

, or all the steps except for the latest one that is still in memory.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

kalman.forget(i)
\end_layout

\begin_layout Plain Layout

kalman.forget()
\end_layout

\end_inset

The 
\family typewriter
rollback
\family default
 methods return the filter to its state just after the invocation of 
\family typewriter
evolve
\family default
 in step 
\family typewriter
i
\family default
, or just after the invocation of 
\family typewriter
evolve
\family default
 in the latest step still in memory.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

kalman.rollback(i)
\end_layout

\begin_layout Plain Layout

kalman.rollback()
\end_layout

\end_inset

The methods 
\family typewriter
earliest
\family default
 and 
\family typewriter
latest
\family default
 are queries that take no arguments and return the indices of the earliest
 and latest steps that are still in memory.
\end_layout

\begin_layout Standard
The 
\family typewriter
smooth
\family default
 method, which also takes no arguments, computes the smoothed estimates
 of all the states still in memory, along with their covariance matrices.
 After this method is called, 
\family typewriter
estimate
\family default
 returns the smoothed estimates.
 A single step can be smoothed many times; each smoothed estimate will use
 the information from all past steps and the information from future steps
 that are in memory when 
\family typewriter
smooth
\family default
 is called.
\end_layout

\begin_layout Standard
To use the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 or 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 implementations from within 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

, create an object of one of the adapter classes:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

kalman = KalmanNative(options)
\end_layout

\begin_layout Plain Layout

kalman = KalmanJava(options)
\end_layout

\end_inset

These adapter classes have exactly the same interface as the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 implementations (including the fact that the 
\family typewriter
options
\family default
 argument is optional).
\end_layout

\begin_layout Standard
To use the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 implementation, you will first need to compile the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 code into a 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

-callable dynamically-linked library that 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 uses through an interface called the 
\family typewriter
mex
\family default
 interface.
 To perform this step, run the 
\family typewriter
UltimateKalman_build_\SpecialChar allowbreak
mex.m
\family default
 script in the 
\family typewriter
matlab
\family default
 directory.
 To use the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 implementation, build the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 library using the instructions in Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:java"
plural "false"
caps "false"
noprefix "false"

\end_inset

, and add both the resulting library (a 
\family typewriter
jar
\family default
 file) and the library containing the Apache Commons Math library to 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

's 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 search path using 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 
\family typewriter
javaaddpath
\family default
 command.
 The function 
\family typewriter
replication.m
\family default
 in the 
\family typewriter
examples
\family default
 sub-directory adds these libraries to the path and can serve as an example.
\end_layout

\begin_layout Subsection
Options
\end_layout

\begin_layout Standard
The 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 implementations interpret a number of options, specified as fields of the
 
\family typewriter
options
\family default
 structure.
 Most of the implementations process only a subset of the options (some
 process none), as shown in Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:matlab-options"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="10">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="20text%">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
field name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
values (default is 1st)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rotate="90" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
KalmanUltimate
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rotate="90" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
KalmanConventional
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rotate="90" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
KalmanOddevenSmoother
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rotate="90" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
KalmanAssociativeSmoother
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rotate="90" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
KalmanSparse
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rotate="90" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
KalmanNative
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rotate="90" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
KalmanJava
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
estimateCovariance
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
boolean
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
true, false
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
covarianceEstimates
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
'PaigeSaunders', 'SelInv'
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
smoothOnly
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
boolean
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
false, true
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
algorithm
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
string
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
'Ultimate', 'Conventional', 'Oddeven', 'Associative'
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\checkmark$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:matlab-options"

\end_inset

Options that affect the behavior of the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 implementations.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The meaning of the options is as follows:
\end_layout

\begin_layout Itemize
The 
\family typewriter
estimateCovariance
\family default
 field tells some of the algorithms that the covariance matrices of the
 state estimates are not required.
 Not computing them saves time in these algorithms.
 This is particularly useful in smoothers that are used as a building block
 of a non-linear smoother
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "10.1109/ICASSP40776.2020.9054686"
literal "false"

\end_inset

.
\end_layout

\begin_layout Itemize
The 
\family typewriter
covarianceEstimates
\family default
 field specifies which method to use to compute the covariance matrices
 of the state estimates, when more than one method is available.
 
\end_layout

\begin_layout Itemize
The 
\family typewriter
smoothOnly
\family default
 field tells an implementation that filtered estimates are not required,
 only smoothed estimates.
 This can save time in some implementations (most notably, the 
\family typewriter
KalmanSparse
\family default
 one).
\end_layout

\begin_layout Itemize
The 
\family typewriter
algorithm
\family default
 field tells the interface to the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 implementations which algorithm to use.
\end_layout

\begin_layout Subsection
Implementation Details
\end_layout

\begin_layout Standard
All the implementations extend an abstract class called 
\family typewriter
KalmanBase
\family default
, which implements most of the methods that handle modifications of the
 sequence of steps (forgetting, rolling back, etc.).
 The 
\family typewriter
KalmanOddevenSmoother
\family default
 and the 
\family typewriter
KalmanAssociative\SpecialChar softhyphen
Smoother
\family default
 implementations do not return filtered estimated, only smoothed estimates.
 They both extend a second abstract class, 
\family typewriter
KalmanExplicitRepresentation
\family default
, in which the 
\family typewriter
evolve
\family default
 and 
\family typewriter
observe
\family default
 methods simply record the equations for later processing by the smoother.
 Both of these implementations are sequential but they exhibit the parallel
 algorithms in a clear way that is hopefully easy to implement in parallel
 programming environments.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:java"

\end_inset

The Java Programming Interface
\end_layout

\begin_layout Standard
The programming interface to the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 implementation is nearly identical.
 The implementing class is 
\family typewriter
sivantoledo\SpecialChar allowbreak
.kalman\SpecialChar allowbreak
.UltimateKalman
\family default
.
 It also uses overloaded methods to express default values.
 It differs from the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 interface only in that the 
\family typewriter
estimate
\family default
 methods return only one value, the state estimate.
 To obtain the matching covariance matrix, client code must call a separate
 method, 
\family typewriter
covariance
\family default
.
\end_layout

\begin_layout Subsection
Building and Running the Java Code
\end_layout

\begin_layout Standard
The 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 implementation resides under the 
\family typewriter
java
\family default
 directory of the distribution archive.
 The sources are in the 
\family typewriter
src
\family default
 subdirectory.
 To use it, you first need to compile the source code and to assemble the
 compiled code into a library (a 
\family typewriter
jar
\family default
 file).
 The scripts 
\family typewriter
build.bat
\family default
 and 
\family typewriter
build.sh
\family default
, both in the 
\family typewriter
java
\family default
 directory, perform these steps under Windows (
\family typewriter
build.bat
\family default
) and Linux and MacOS (
\family typewriter
build.sh
\family default
).
 To run the scripts, your computer must have a 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 development kit (JDK) installed.
 We used successfully releases of OpenJDK on both Windows and Linux.
 The code is compiled so that the library can be used with any version of
 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 starting with version
\begin_inset space ~
\end_inset

8 (sometimes also referred to as 1.8).
\end_layout

\begin_layout Standard
The build scripts also compile and run an example program, 
\family typewriter
Rotation.java
\family default
.
 It performs the same computations as the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 example function 
\family typewriter
rotation.m
\family default
 when executed with arguments 
\family typewriter
rotation(UltimateKalman,5,2)
\family default
.
 This program serves as an example that shows how to write 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 code that calls 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
UltimateKalman
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:c-lang"

\end_inset

The C programming interface
\end_layout

\begin_layout Standard
In the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 interface, defined in 
\family typewriter
kalman.h
\family default
, the filter is represented by a pointer to a structure of the 
\family typewriter
kalman_t
\family default
 type; to client code, this structure is opaque (there is no need to directly
 access its fields).
 The filter is constructed by a call to 
\family typewriter
kalman_create
\family default
 or 
\family typewriter
kalman_create_options
\family default
, which returns a pointer to 
\family typewriter
kalman_t
\family default
.
 The interface to the parallel smoothers is a little different and will
 be explained later.
\end_layout

\begin_layout Standard
In general, the memory management principle of the interface (and the internal
 implementation) is that client code is responsible for freeing memory that
 was allocated by a call to any function whose name includes the word 
\family typewriter
create
\family default
.
 Therefore, when client code no longer needs a filter, it must call 
\family typewriter
kalman_free
\family default
 and pass the pointer as an argument.
 
\end_layout

\begin_layout Standard
The functionality of the filter is exposed through functions that correspond
 to methods in the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 and 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 implementations.
 These functions expect a pointer to 
\family typewriter
kalman_t
\family default
 as their first argument.
 The functions are not overloaded because 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 does not support overloading.
 Missing matrices and vectors (e.g., to 
\family typewriter
evolve
\family default
 and 
\family typewriter
observe
\family default
) are represented by a 
\family typewriter
NULL
\family default
 pointer and default step numbers (to 
\family typewriter
forget
\family default
 , 
\family typewriter
estimate
\family default
, and so on) by 
\begin_inset Formula $-1$
\end_inset

.
 Here is the declaration the functions.
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

kalman_t*        kalman_create         ();
\end_layout

\begin_layout Plain Layout

kalman_t*        kalman_create_options (kalman_options_t options);
\end_layout

\begin_layout Plain Layout

void             kalman_free           (kalman_t* kalman);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void             kalman_evolve    (kalman_t* kalman, int32_t n_i,      
                                                
\end_layout

\begin_layout Plain Layout

                                   kalman_matrix_t* H_i, 
\end_layout

\begin_layout Plain Layout

                                   kalman_matrix_t* F_i, kalman_matrix_t*
 c_i,
\end_layout

\begin_layout Plain Layout

                                   kalman_matrix_t* K_i, char K_i_type);
\end_layout

\begin_layout Plain Layout

void             kalman_observe   (kalman_t* kalman,                   
                                            
\end_layout

\begin_layout Plain Layout

                                   kalman_matrix_t* G_i, kalman_matrix_t*
 o_i,
\end_layout

\begin_layout Plain Layout

                                   kalman_matrix_t* C_i, char C_i_type);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int64_t          kalman_earliest  (kalman_t* kalman);
\end_layout

\begin_layout Plain Layout

int64_t          kalman_latest    (kalman_t* kalman);
\end_layout

\begin_layout Plain Layout

void             kalman_forget    (kalman_t* kalman, int64_t i);
\end_layout

\begin_layout Plain Layout

void             kalman_rollback  (kalman_t* kalman, int64_t i);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void             kalman_smooth    (kalman_t* kalman);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

kalman_matrix_t* kalman_estimate        (kalman_t* kalman, int64_t i);
\end_layout

\begin_layout Plain Layout

kalman_matrix_t* kalman_covariance      (kalman_t* kalman, int64_t i);
\end_layout

\begin_layout Plain Layout

char             kalman_covariance_type (kalman_t* kalman, int64_t i);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

kalman_matrix_t* kalman_perftest        (kalman_t* kalman, ...); // see later
\end_layout

\end_inset

Note that input covariance matrices are represented by a 
\family typewriter
kalman_matrix_t
\family default
 and a representation code (a single character).
 The output of 
\family typewriter
kalman_covariance
\family default
 is a matrix 
\begin_inset Formula $W$
\end_inset

 such that 
\begin_inset Formula $C=(W^{T}W)^{-1}$
\end_inset

 or 
\begin_inset Formula $C$
\end_inset

 itself, where 
\begin_inset Formula $C$
\end_inset

 is the covariance matrix of the output of 
\family typewriter
kalman_estimate
\family default
 on the same step.
 The function 
\family typewriter
kalman_covariance_type
\family default
 specifies whether 
\begin_inset Formula $C$
\end_inset

 is represented by itself or by its inverse factor 
\begin_inset Formula $W$
\end_inset

.
\end_layout

\begin_layout Standard
A small set of helper functions allows client code to construct input matrices
 in the required format, to set their elements, and to read and use matrices
 returned by 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
UltimateKalman
\end_layout

\end_inset

.
 Here are the declarations of some of them (the full set is declared in
 
\family typewriter
matrix_ops.h
\family default
, included automatically by 
\family typewriter
kalman.h
\family default
).
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

kalman_matrix_t* matrix_create(int32_t rows, int32_t cols);
\end_layout

\begin_layout Plain Layout

void             matrix_free(kalman_matrix_t* A);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void   matrix_set(kalman_matrix_t* A, int32_t i, int32_t j, double v);
\end_layout

\begin_layout Plain Layout

double matrix_get(kalman_matrix_t* A, int32_t i, int32_t j);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int32_t matrix_rows(kalman_matrix_t* A);
\end_layout

\begin_layout Plain Layout

int32_t matrix_cols(kalman_matrix_t* A);
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Client code is responsible for freeing matrices returned by 
\family typewriter
kalman_estimate
\family default
 and 
\family typewriter
kal\SpecialChar softhyphen
man_\SpecialChar softhyphen
covariance
\family default
 by calling 
\family typewriter
matrix_free
\family default
 when they are no longer needed.
\end_layout

\begin_layout Subsection
Options
\end_layout

\begin_layout Standard
The 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 takes an integer-type options argument that specifies which algorithm to
 use, as well as parameters for these algorithms (currently only one parameter
 is supported).
 Different options are ORed together.
 The option values defined in 
\family typewriter
kalman.h
\family default
 are:
\end_layout

\begin_layout Itemize

\family typewriter
KALMAN_ALGORITHM_ULTIMATE
\family default
, 
\family typewriter
KALMAN_ALGORITHM_CONVENTIONAL
\family default
, 
\family typewriter
KALMAN_\SpecialChar softhyphen
ALGORITHM_\SpecialChar softhyphen
ODDEVEN
\family default
, and 
\family typewriter
KALMAN_ALGORITHM_ASSOCIATIVE
\family default
, which specify which algorithm to use.
 Specify exactly one of these bit values.
\end_layout

\begin_layout Itemize

\family typewriter
KALMAN_NO_COVARIANCE
\family default
, which tells the UltimateKalman and the Oddeven algorithms not to compute
 the covariance matrices of the estimates.
\end_layout

\begin_layout Subsection
Direct Invocation of the Parallel Smoothers
\end_layout

\begin_layout Standard
The two parallel smoothers can be invoked for testing by first supplying
 the evolution and observation equations using a sequence of calls to 
\family typewriter
kalman_evolve
\family default
 and 
\family typewriter
kalman_observe
\family default
 and then calling 
\family typewriter
kalman_smooth
\family default
, but this normally not appropriate for high-performance parallel software,
 because the construction of the input to the smoother is completely sequential.
\end_layout

\begin_layout Standard
Instead, the parallel smoothers should be invoked directly on an array of
 equations,
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

void kalman_smooth_oddeven(kalman_options_t         options, 
\end_layout

\begin_layout Plain Layout

                          kalman_step_equations_t** equations, 
\end_layout

\begin_layout Plain Layout

                          kalman_step_index_t       k); 
\end_layout

\begin_layout Plain Layout

void kalman_smoother_associative(...); // same arguments
\end_layout

\end_inset

The first argument contains options, as in the call to 
\family typewriter
kalman_create_options
\family default
.
 The second, 
\family typewriter
equations
\family default
, is an array of 
\family typewriter
k
\family default
 pointers to structures that each define an evolution equation and an observatio
n equation, defined in 
\family typewriter
kalman.h
\family default
:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

typedef struct kalman_step_equations_st {
\end_layout

\begin_layout Plain Layout

  kalman_step_index_t step; // logical step number, start from 0
\end_layout

\begin_layout Plain Layout

  int32_t dimension;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  kalman_matrix_t* H;
\end_layout

\begin_layout Plain Layout

  kalman_matrix_t* F;
\end_layout

\begin_layout Plain Layout

  kalman_matrix_t* c;
\end_layout

\begin_layout Plain Layout

  kalman_matrix_t* K;
\end_layout

\begin_layout Plain Layout

  char             K_type;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  kalman_matrix_t* G;
\end_layout

\begin_layout Plain Layout

  kalman_matrix_t* o;
\end_layout

\begin_layout Plain Layout

  kalman_matrix_t* C;
\end_layout

\begin_layout Plain Layout

  char             C_type;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  kalman_matrix_t* state;
\end_layout

\begin_layout Plain Layout

  kalman_matrix_t* covariance;
\end_layout

\begin_layout Plain Layout

  char             covariance_type;
\end_layout

\begin_layout Plain Layout

} kalman_step_equations_t;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Parallel codes should normally allocate two arrays of length 
\family typewriter
k
\family default
, an arrays of structures and an array of pointers to these structures,
 and ideally fill their elements using a multi-threaded code.
 The array of pointers should be filled with the addresses of the elements
 in the array of structures.
 Each structure should be filled with the matrices that define the evolution
 and observation equations of one step; the semantics are the same as in
 calls to 
\family typewriter
kalman_evolve
\family default
 and 
\family typewriter
kalman_observe
\family default
.
 The 
\family typewriter
dimension
\family default
 field specifies the dimension of the state vector, and the 
\family typewriter
step
\family default
 field is a sequence number that should start from zero.
\end_layout

\begin_layout Standard
When the call to the smoother returns, the 
\family typewriter
state
\family default
 fields contain the smoothed state estimates and the 
\family typewriter
covariance
\family default
 and 
\family typewriter
covariance_type
\family default
 fields contain the covariance of the state, unless the 
\family typewriter
KALMAN_NO_COVARIANCE
\family default
 bit was set in 
\family typewriter
options
\family default
.
\end_layout

\begin_layout Standard
The parallel-programming environment that the library uses, TBB, allows
 codes to control the number of operating-system threads that are used in
 a given computation, and a parameter called the block size.
 The first parameter controls how many physical cores are used.
 The second controls the overhead of parallelism: in parallel for loops
 and similar constructs, the environment performs blocks of iterations sequentia
lly to reduce overhead.
 Our experiments indicate that a value of 16 is a good for the block size.
\begin_inset Note Note
status open

\begin_layout Plain Layout
increased from the 10 in the paper, to ensure that even in an array of pointers,
 blocks fill entire cache lines.
\end_layout

\end_inset

 Callers should specify these two value, using the following two functions
 defined in 
\family typewriter
parallel.h
\family default
, before calling a parallel smoother:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

void parallel_set_thread_limit(int p); 
\end_layout

\begin_layout Plain Layout

void parallel_set_blocksize   (int b); 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Building and Running the C Codes Outside MATLAB
\end_layout

\begin_layout Standard
To help you integrate 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
UltimateKalman
\end_layout

\end_inset

 into your own native code in 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 or 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C++
\end_layout

\end_inset

, the software includes several example programs that call 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
UltimateKalman
\end_layout

\end_inset

 and Windows and Linux/MacOS scripts that build executable versions of the
 three programs.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The scripts compile one of the programs along with 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
UltimateKalman
\end_layout

\end_inset

, link it with 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
BLAS
\end_layout

\end_inset

 and 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
LAPACK
\end_layout

\end_inset

 libraries, and run it.
\end_layout

\end_inset

 You should be able to use these scripts as examples of how to compile and
 link 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
UltimateKalman
\end_layout

\end_inset

.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
In particular, the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 implementation of 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
UltimateKalman
\end_layout

\end_inset

 consists of a single 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 source file, so it is not necessary to build it into a library; the source
 code or a single object file can be used directly in your 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 or 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C++
\end_layout

\end_inset

 programs or libraries.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
These 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 programs, the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 implementation of 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
UltimateKalman
\end_layout

\end_inset

, and the build scripts are all under the 
\family typewriter
c
\family default
 directory of the distribution archive.
\end_layout

\begin_layout Subsubsection*
Building Under Windows
\end_layout

\begin_layout Standard
The Windows build script 
\family typewriter
build.bat
\family default
 uses the BLAS and LAPACK libraries from MKL
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "MKL"
literal "false"

\end_inset

.
 Both MKL and TBB are installed as part of the oneAPI Base Kit, a set of
 free development tools from Intel.
 The kit includes additional components but for UltimateKalman, only thse
 components are required.
 We tested the library with the 2024.1 and 2025.0 versions of oneAPI, as well
 as some older ones.
 Upgrading oneMKL should not require any change in the build script.
\end_layout

\begin_layout Standard
The script also uses Microsoft's C/C++ compiler (
\family typewriter
cl
\family default
) from the free Visual Studio Community Edition.
 We tested the library with versions 2019 and 2022
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "VSCommunity"
literal "false"

\end_inset

.
 The build script is currently set up to use the 2022 version.
 If you installed a different version, you will need to update the path
 to the script that sets up the development tool in 
\family typewriter
build.bat
\family default
.
\end_layout

\begin_layout Standard
Assuming that these prerequisites have been installed, you can build the
 example programs by executing 
\family typewriter
build.bat
\family default
.
 The script will build the programs and it will tell you to execute another
 script so that Windows can find the MKL libraries at run time.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

C:
\backslash
Users
\backslash
stoledo
\backslash
github
\backslash
ultimate-kalman
\backslash
c>build.bat
\end_layout

\begin_layout Plain Layout

**********************************************************************
\end_layout

\begin_layout Plain Layout

** Visual Studio 2022 Developer Command Prompt v17.9.2
\end_layout

\begin_layout Plain Layout

** Copyright (c) 2022 Microsoft Corporation
\end_layout

\begin_layout Plain Layout

**********************************************************************
\end_layout

\begin_layout Plain Layout

[vcvarsall.bat] Environment initialized for: 'x64'
\end_layout

\begin_layout Plain Layout

:: initializing oneAPI environment...
\end_layout

\begin_layout Plain Layout

   Initializing Visual Studio command-line environment...
\end_layout

\begin_layout Plain Layout

   Visual Studio version 17.9.2 environment configured.
\end_layout

\begin_layout Plain Layout

   "C:
\backslash
Program Files
\backslash
Microsoft Visual Studio
\backslash
2022
\backslash
Community
\backslash
"
\end_layout

\begin_layout Plain Layout

   Visual Studio command-line environment initialized for: 'x64'
\end_layout

\begin_layout Plain Layout

:  advisor -- latest
\end_layout

\begin_layout Plain Layout

:  compiler -- latest
\end_layout

\begin_layout Plain Layout

:  dev-utilities -- latest
\end_layout

\begin_layout Plain Layout

:  ipp -- latest
\end_layout

\begin_layout Plain Layout

:  mkl -- latest
\end_layout

\begin_layout Plain Layout

:  ocloc -- latest
\end_layout

\begin_layout Plain Layout

:  pti -- latest
\end_layout

\begin_layout Plain Layout

:  tbb -- latest
\end_layout

\begin_layout Plain Layout

:  umf -- latest
\end_layout

\begin_layout Plain Layout

:: oneAPI environment initialized ::
\end_layout

\begin_layout Plain Layout

kalman_ultimate.c
\end_layout

\begin_layout Plain Layout

kalman_conventional.c
\end_layout

\begin_layout Plain Layout

kalman_oddeven_smoother.c
\end_layout

\begin_layout Plain Layout

kalman_associative_smoother.c
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

generated test programs
\end_layout

\begin_layout Plain Layout

To run the generated binaries, invoke
\end_layout

\begin_layout Plain Layout

  "C:
\backslash
Program Files (x86)
\backslash
Intel
\backslash
oneAPI
\backslash
setvars.bat" intel64
\end_layout

\begin_layout Plain Layout

on the command line, to ensure that Windows can find the required DLLs.
\end_layout

\end_inset

You can see in the output the setup of Visual Studio, then the setup of
 oneAPI, and then the compilation of the source files.
 Once you run 
\family typewriter
setvars.bat
\family default
 so that Windows can find the libraries, you can run the test programs.
 The output of 
\family typewriter
blastest.exe
\family default
, the simplest example program, should look like this:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

C:
\backslash
Users
\backslash
stoledo
\backslash
github
\backslash
ultimate-kalman
\backslash
c>blastest
\end_layout

\begin_layout Plain Layout

BLAS test starting
\end_layout

\begin_layout Plain Layout

A = matrix_print 2 3
\end_layout

\begin_layout Plain Layout

1 2 3
\end_layout

\begin_layout Plain Layout

4 5 6
\end_layout

\begin_layout Plain Layout

B = matrix_print 3 2
\end_layout

\begin_layout Plain Layout

7 8
\end_layout

\begin_layout Plain Layout

9 10
\end_layout

\begin_layout Plain Layout

12 13
\end_layout

\begin_layout Plain Layout

C = matrix_print 2 2
\end_layout

\begin_layout Plain Layout

125 137
\end_layout

\begin_layout Plain Layout

293 323
\end_layout

\begin_layout Plain Layout

Result should be:
\end_layout

\begin_layout Plain Layout

  125  137
\end_layout

\begin_layout Plain Layout

  293  323
\end_layout

\begin_layout Plain Layout

BLAS test done
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Building Under Linux
\end_layout

\begin_layout Standard
Under Linux, 
\family typewriter
build.sh
\family default
 is set up to use high-performance 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
BLAS
\end_layout

\end_inset

 and 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
LAPACK
\end_layout

\end_inset

 libraries, normally libraries provides by the CPU vendor:
\end_layout

\begin_layout Itemize
On Intel CPUs, the script uses both MKL
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "MKL"
literal "false"

\end_inset

 and TBB from Intel's free oneAPI base development kit.
 Install using the instructions on Intel's web site.
 The script contains a variable that must be set up to the path where oneAPI
 was installed.
 This path is normally 
\family typewriter
/opt/intel/oneAPI
\family default
, but if you installed it elsewhere, you will need to update this path in
 the script.
\end_layout

\begin_layout Itemize
On AMD CPUs, the script uses the BLAS and LAPACK from the AMD performance
 libraries, which you can download freely from the AMD web site.
 Again there is a path that might need to be modified.
 You will also need to install TBB separately.
 On Ubuntu Linux, you can install it using the command 
\family typewriter
sudo apt install libtbb-dev
\family default
.
\end_layout

\begin_layout Itemize
On ARM processors, the script uses the BLAS and LAPACK from the ARM performance
 libraries, which you can download freely from the ARM web site.
 Again there is a path that might need to be modified.
 You will also need to install TBB separately.
 On Ubuntu Linux, you can install it using the command 
\family typewriter
sudo apt install libtbb-dev
\family default
.
\end_layout

\begin_layout Standard
In principle, for testing you can also use the BLAS and LAPACK libraries
 that the Linux distribution provides.
 On Ubuntu, you can install them using the commands
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sudo apt install libblas-dev
\end_layout

\begin_layout Plain Layout

sudo apt install liblapack-dev
\end_layout

\end_inset

For small state dimensions these libraries might perform similarly to the
 vendor's high-performance libraries, but for large dimensions the CPU-vendor's
 libraries typically perform better.
\end_layout

\begin_layout Subsubsection*
Building Under MacOS
\end_layout

\begin_layout Standard
The 
\family typewriter
build.sh
\family default
 script assumes that on MacOS, XCode is installed (Apple's development environme
nt), which provides a C/C++ compiler.
 The script also assumes that TBB has been installed using Homebrew, a popular
 package manager for MacOS.
 The compiler is invoked in the script using the 
\family typewriter
gcc
\family default
 command, but the actual compiler is not the GNU C compiler (
\family typewriter
gcc
\family default
) but 
\family typewriter
clang
\family default
.
 The BLAS and LAPACK libraries that we use in the MacOS build are from Apple's
 Accelerate framework, a collection of high-performance libraries.
\end_layout

\begin_layout Standard
To install TBB using Homebrew, first install Homebrew (if not already installed)
 and then issue the commands 
\family typewriter
brew update
\family default
 and 
\family typewriter
brew install tbb
\family default
.
 To inspect the installed version, use the command 
\family typewriter
brew info tbb
\family default
.
\end_layout

\begin_layout Subsubsection*
Running Example Programs
\end_layout

\begin_layout Standard
The build script builds two binaries from each of the four example source
 files, a sequential binary and a multi-threaded binary compiled using TBB.
 The multi-threaded binaries have names that end with 
\family typewriter
_par
\family default
, such as 
\family typewriter
performance_par
\family default
.
 The examples are:
\end_layout

\begin_layout Itemize

\family typewriter
blastest
\family default
, a simple program that only tests that UltimateKalman is able to call BLAS
 and LAPACK functions correctly.
 If this program fails to compile, to link, or to run, there is a problem
 with the BLAS and LAPACK libraries.
 
\end_layout

\begin_layout Itemize

\family typewriter
rotation
\family default
 performs the same computation that the expression 
\family typewriter
rotation(\SpecialChar softhyphen
KalmanUltimate,5,2)
\family default
 performs in the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 version and should output the same numerical results, just like 
\family typewriter
Rotation.java
\family default
.
 This example shows how to use UltimateKalman to filter and smooth, and
 it shows how the APIs in the three languages are related to each other.
\begin_inset Newline newline
\end_inset

The program accepts up to 3 parameters, specified on the command-line as
 key-value pairs: 
\family typewriter
nthreads
\family default
, 
\family typewriter
blocksize
\family default
, and 
\family typewriter
algorithm
\family default
.
 The first takes an integer value (e.g., 
\family typewriter
nthreads=4
\family default
) and limits TBB to use this number of operating-system threads, and hence
 this number of cores.
 If you omit this parameter, TBB will use all the cores available.
 The second controls TBB's block size, the number of elements that are processed
 sequentially in parallel loops.
 The default value is 16.
 The third tells the program which algorithm to use, with possible values
 
\family typewriter
Ultimate
\family default
, 
\family typewriter
Conventional
\family default
, 
\family typewriter
Oddeven
\family default
, and 
\family typewriter
Associative
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
performance
\family default
 implements a Kalman smoother on problems with 
\begin_inset Formula $n_{i}=m_{i}=n$
\end_inset

 and 
\begin_inset Formula $k$
\end_inset

 steps.
 The matrices 
\begin_inset Formula $F_{i}$
\end_inset

 and 
\begin_inset Formula $G_{i}$
\end_inset

 are orthonormal and 
\begin_inset Formula $H_{i}=I$
\end_inset

.
 These choices avoid the risk of numerical problems, including overflows
 or underflows.
 The program measures and reports the running time it takes to set up the
 problem and to perform filtering (unless the algorithm selected is a smoother),
 and the time it takes to perform smoothing.
 You specify 
\begin_inset Formula $n$
\end_inset

 and 
\begin_inset Formula $k$
\end_inset

 on the command line.
 Setting 
\begin_inset Formula $n=6$
\end_inset

 or 
\begin_inset Formula $n=48$
\end_inset

 results in exactly the same numerical input as the MATLAB version (with
 seed 1 for the random-number generator).
\begin_inset Newline newline
\end_inset

The program accepts all the parameters that 
\family typewriter
rotation
\family default
 accepts, but also 
\family typewriter
n
\family default
, 
\family typewriter
k
\family default
, and 
\family typewriter
nocov
\family default
.
 The last is a binary parameter that tells the program, if set, to not compute
 the covariance matrices of the state estimates.
 
\end_layout

\begin_layout Subsubsection*
Modifying Build Parameters
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The three sample programs are 
\family typewriter
rotation.c
\family default
, a 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 implementation of one of the example 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 programs, 
\family typewriter
performance.c
\family default
, a program designed to measure the running time of 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
UltimateKalman
\end_layout

\end_inset

, and 
\family typewriter
blastest.c
\family default
, a small program intended only to test the interface to the 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
BLAS
\end_layout

\end_inset

 and 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
LAPACK
\end_layout

\end_inset

 libraries.
 The program 
\family typewriter
rotation.c
\family default
 performs the same computation that the expression 
\family typewriter
rotation(KalmanUltimate,5,2)
\family default
 performs in 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 and should output the same numerical results, just like 
\family typewriter
Rotation.java
\family default
.
 The program 
\family typewriter
performance.c
\family default
 implements a Kalman smoother on problems with 
\begin_inset Formula $n_{i}=m_{i}=n$
\end_inset

 and 
\begin_inset Formula $k$
\end_inset

 steps using orthonormal matrices for 
\begin_inset Formula $F_{i}$
\end_inset

 and 
\begin_inset Formula $G_{i}$
\end_inset

 and with 
\begin_inset Formula $H_{i}=I$
\end_inset

.
 It measures and reports the running time of the smoother.
 You specify 
\begin_inset Formula $n$
\end_inset

 and 
\begin_inset Formula $k$
\end_inset

 on the command line.
\end_layout

\begin_layout Plain Layout
If you invoke the build script, 
\family typewriter
build.bat
\family default
 or 
\family typewriter
build.sh
\family default
, with no arguments, it build and runs 
\family typewriter
rotation.c
\family default
.
 To build and run one of the other programs, invoke the script with the
 argument 
\family typewriter
blastest
\family default
 or 
\family typewriter
performance
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
The Windows script, 
\family typewriter
build.bat
\family default
, uses the Microsoft 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 command-line compiler (
\family typewriter
cl
\family default
) that comes with Microsoft's Visual Studio Community 2022
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "VSCommunity"
literal "false"

\end_inset

, a free integrated development environment, and the 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
BLAS
\end_layout

\end_inset

 and 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
LAPACK
\end_layout

\end_inset

 libraries that are part of Intel's free oneAPI Math Kernel Library (
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
MKL
\end_layout

\end_inset

)
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "MKL"
literal "false"

\end_inset

.
 Here is what you should expect to see on the console when you build and
 run 
\family typewriter
blastest
\family default
 (ellipsis stand for deleted output that is not particularly interesting;
 the output of the 
\family typewriter
blastest
\family default
 program is shown in bold):
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

C:
\backslash
Users
\backslash
stoledo
\backslash
github
\backslash
ultimate-kalman
\backslash
c>build.bat blastest
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

**********************************************************************
\end_layout

\begin_layout Plain Layout

** Visual Studio 2022 Developer Command Prompt v17.9.2
\end_layout

\begin_layout Plain Layout

** Copyright (c) 2022 Microsoft Corporation
\end_layout

\begin_layout Plain Layout

**********************************************************************
\end_layout

\begin_layout Plain Layout

[vcvarsall.bat] Environment initialized for: 'x64'
\end_layout

\begin_layout Plain Layout

:: initializing oneAPI environment...
\end_layout

\begin_layout Plain Layout

   Initializing Visual Studio command-line environment...
\end_layout

\begin_layout Plain Layout

   Visual Studio version 17.9.2 environment configured.
\end_layout

\begin_layout Plain Layout

   "C:
\backslash
Program Files
\backslash
Microsoft Visual Studio
\backslash
2022
\backslash
Community
\backslash
"
\end_layout

\begin_layout Plain Layout

:  compiler -- latest
\end_layout

\begin_layout Plain Layout

:  mkl -- latest
\end_layout

\begin_layout Plain Layout

:  tbb -- latest
\end_layout

\begin_layout Plain Layout

:: oneAPI environment initialized ::
\end_layout

\begin_layout Plain Layout

generating test program blastest.exe
\end_layout

\begin_layout Plain Layout

ultimatekalman.c
\end_layout

\begin_layout Plain Layout

ultimatekalman.c(39): warning C4005: 'blas_int_t': macro redefinition
\end_layout

\begin_layout Plain Layout

ultimatekalman.c(28): note: see previous definition of 'blas_int_t'
\end_layout

\begin_layout Plain Layout

blastest.c
\end_layout

\begin_layout Plain Layout

Generating Code...
\end_layout

\begin_layout Plain Layout

generated test program
\end_layout

\begin_layout Plain Layout

~BLAS test starting~
\end_layout

\begin_layout Plain Layout

~A = matrix_print 2 3~
\end_layout

\begin_layout Plain Layout

~1 2 3~
\end_layout

\begin_layout Plain Layout

~4 5 6~
\end_layout

\begin_layout Plain Layout

~B = matrix_print 3 2~
\end_layout

\begin_layout Plain Layout

~7 8~
\end_layout

\begin_layout Plain Layout

~9 10~
\end_layout

\begin_layout Plain Layout

~12 13~
\end_layout

\begin_layout Plain Layout

~C = matrix_print 2 2~
\end_layout

\begin_layout Plain Layout

~125 137~
\end_layout

\begin_layout Plain Layout

~293 323~
\end_layout

\begin_layout Plain Layout

~Result should be:~
\end_layout

\begin_layout Plain Layout

~  125  137~
\end_layout

\begin_layout Plain Layout

~  293  323~
\end_layout

\begin_layout Plain Layout

~BLAS test done~
\end_layout

\begin_layout Plain Layout

done running test
\end_layout

\begin_layout Plain Layout

build script done
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
When you run the Windows executable program yourself, make sure that the
 directory where the 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
MKL
\end_layout

\end_inset

 dynamically-linked libraries (
\family typewriter
dll
\family default
 files) are stored is on your 
\family typewriter
path
\family default
.
 The same is true, of course, for your own programs that use 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
UltimateKalman
\end_layout

\end_inset

.
 The installation of 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
MKL
\end_layout

\end_inset

 does not modify the path to include this library, but it does provide a
 script that modifies the search path appropriately.
 In the version of 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
MKL
\end_layout

\end_inset

 that I used, this script is 
\family typewriter
c:
\backslash
Program Files (x86)
\backslash
Intel
\backslash
oneAPI
\backslash
setvars.bat
\family default
.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Certain aspects of UltimateKalman can be modified by defining preprocessor
 macros, listed in Table
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "tab:C-pre-variables"
plural "false"
caps "false"
noprefix "false"

\end_inset

:
\end_layout

\begin_layout Itemize
The BLAS and LAPACK were originally Fortran libraries and different implementati
ons of them must be called from C in different ways.
 Several proprocessor macros select the calling convention.
 The build scripts set these up for several popular libraries.
 
\end_layout

\begin_layout Itemize
Step numbers (indices of states) can be represented by 32-bit or 64-bit
 numbers.
 Three preprocessor macros, which should be set consistently, control this
 choice: 
\family typewriter
KALMAN_STEP_INDEX_TYPE_INT32
\family default
, 
\family typewriter
FARRAY_INDEX_TYPE_INT32
\family default
, and 
\family typewriter
PARALLEL_INDEX_TYPE_INT32
\family default
 (to use 64-bit integers, replace 
\family typewriter
INT32
\family default
 by 
\family typewriter
INT64
\family default
; it is also possible to use unsigned integer typed, but we advise against
 this).
 
\end_layout

\begin_layout Itemize
Two preprocessor macros listed at the bottom of the table control debug
 outputs.
 They should normally not be set.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top" width="40text%">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
variable name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
requires a value?
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
explanation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
BUILD_MKL
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
specifies that 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
MKL
\end_layout

\end_inset

 is used; sets all the other 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
BLAS
\end_layout

\end_inset

 and 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
LAPACK
\end_layout

\end_inset

 variables (so you do not need to)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
BUILD_BLAS_INT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 data type that specifies a row or column index or a dimension of a matrix;
 usually either 
\family typewriter
int32_t
\family default
 or 
\family typewriter
int64_t
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HAS_BLAS_H
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
specifies that the 
\family typewriter
blas.h
\family default
 header is available
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HAS_LAPACK_H
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
specifies that the 
\family typewriter
lapack.h
\family default
 header is available
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
BUILD_BLAS_UNDERSCORE
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
add an underscore to names of 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
BLAS
\end_layout

\end_inset

 and 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
LAPACK
\end_layout

\end_inset

 functions
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
BUILD_BLAS_STRLEN_END
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
add string-length arguments to calls to the 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
BLAS
\end_layout

\end_inset

 and 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
LAPACK
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
KALMAN_STEP_INDEX_TYPE_INT32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
exactly one
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Specifies 32-bit step numbers
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
KALMAN_STEP_INDEX_TYPE_INT64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
exactly one
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Speficies 64-bit step numbers
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
FARRAY_INDEX_TYPE_INT32/64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Must be consistent with 
\family typewriter
KALMAN_STEP_INDEX_TYPE
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
PARALLEL_INDEX_TYPE_INT32/64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Must be consistent with 
\family typewriter
KALMAN_STEP_INDEX_TYPE
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
BUILD_DEBUG_PRINTOUTS
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
generates run-time debug printouts
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
NDEBUG
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
suppresses run-time assertion checking
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:C-pre-variables"

\end_inset

Preprocessor variables that control how 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
UltimateKalman
\end_layout

\end_inset

 calls the 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
BLAS
\end_layout

\end_inset

 and 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
LAPACK
\end_layout

\end_inset

, as well as several other aspects of its behavior.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:testing-and-examples"

\end_inset

MATLAB Tests and Code Examples 
\end_layout

\begin_layout Standard
The software distribution of 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
UltimateKalman
\end_layout

\end_inset

 includes several 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 example and testing functions, stored in the 
\family typewriter
examples
\family default
 sub-directory.
 They demonstrate how to use the library and help test it.
 The directory also contains a function that builds the MATLAB-callable
 version of the C libray.
 All of these MATLAB files are documented with comments that can be accessed
 through the MATLAB 
\family typewriter
help
\family default
 command (e.g., 
\family typewriter
help rotation
\family default
).
 Not all the examples work with all the Kalman filtering and smoothing algorithm
s.
 
\end_layout

\begin_layout Standard
The script 
\family typewriter
UltimateKalman_build_mex
\family default
 builds the MATLAB-callable version of the C (native) library.
 The produced native library is a file in a format called a mex file.
 
\end_layout

\begin_layout Standard
The examples take as input a Kalman filter factory function, which allows
 them to instantiate one or more instances of the same algorithm.
 You construct these factory functions by calling 
\family typewriter
kalmanFactory
\family default
 function, which accepts the name of a class and optionally a structure
 with options for its constructor.
 For example:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ultimateFactory = kalmanFactory('UltimateKalman');
\end_layout

\begin_layout Plain Layout

nativeFactory   = kalmanFactory('KalmanNative',struct('algorithm','Conventional'
));
\end_layout

\begin_layout Plain Layout

rotation( ultimateFactory, 5, 2 );
\end_layout

\begin_layout Plain Layout

rotation( nativeFactory,   5, 2 );
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The examples are:
\end_layout

\begin_layout Itemize

\family typewriter
rotation.m
\family default
, modeling a rotating point in the plane (this example is also implemented
 in 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 and 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

, as described above).
 This example should work with all the Kalman algorithms, but in implementations
 that only smooth (do not filter), it will obviously not produce filtered
 stated.
\end_layout

\begin_layout Itemize

\family typewriter
constant.m
\family default
, modeling an fixed scalar or a scalar that increases linearly with time,
 and with observation covariance matrices that are identical in all steps
 except perhaps for one exceptional step.
\end_layout

\begin_layout Itemize

\family typewriter
add_remove.m
\family default
, demonstrating how to use 
\begin_inset Formula $H_{i}$
\end_inset

 to add or remove parameters from a dynamic system.
 This example does not work with the conventional Kalman filter-smoother
 and does not work with the associative smoother, which both do not support
 non-identity 
\begin_inset Formula $H_{i}$
\end_inset

s.
\end_layout

\begin_layout Itemize

\family typewriter
projectile.m
\family default
, implementing the model and filter of a projectile described by Humpherys
 et al.
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "AFreshLook2012"
literal "false"

\end_inset

.
\end_layout

\begin_layout Itemize

\family typewriter
clock_offsets.m
\family default
, implementing clock-offset estimation in a distributed sensor system.
 This example demonstrates how to handle parameters that appear only in
 one step and it too depends on non-identity 
\begin_inset Formula $H_{i}$
\end_inset

s.
\end_layout

\begin_layout Standard
The mathematical details of these models are described in the article that
 describes 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
UltimateKalman
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
The file 
\family typewriter
performance.m
\family default
 contains a function that tests and plots the performance of Kalman filters
 and smoothers.
 Its behavior is described in the next section.
\end_layout

\begin_layout Standard
The file 
\family typewriter
compare.m
\family default
 contains a function that runs two Kalman filters and/or smoothers on the
 same synthetic problem and compares their result.
 Its main function is to test the correctness of one algorithm or implementation
 to another known to be correct.
 It does not currently provide a complete coverage of all the code in all
 the implementation, but it is still very effective in detecting bugs.
 The gold standard for the known-correct filter/smoother is the 
\family typewriter
KalmanSparse
\family default
 implementation, which is the simplest so its correctness is easiest to
 validate analytically, but it is slow, especially when filtering.
 A reasonable strategy is to use it to validate the correctness of another
 filter/smoother once, say 
\family typewriter
KalmanUltimate
\family default
, and then to use this filter/smoother to test the other implementations
 and algorithms.
 The main current limitation of this function is that it always uses 
\begin_inset Formula $H_{i}=I$
\end_inset

.
\end_layout

\begin_layout Standard
The script 
\family typewriter
replication.m
\family default
, also in the 
\family typewriter
examples
\family default
 sub-directory, runs all of these examples and optionally generates the
 figures shown in Section
\begin_inset space ~
\end_inset

5 of the article on UltimateKalman
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "doi:10.1145/3699958"
literal "false"

\end_inset

.
 Comparing the generated figures to those in the article provides visual
 evidence that the code runs correctly.
 The script can run not only the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 implementation, but also the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 and 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 implementations.
 This script assumes that the corresponding libraries have already been
 built.
 The version of the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 library that 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 uses is built using the 
\family typewriter
UltimateKalman_build_\SpecialChar allowbreak
mex.m
\family default
 script, as explained in Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:c-lang"
plural "false"
caps "false"
noprefix "false"

\end_inset

 above.
 The 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 version should be built outside 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

, as explained in Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:java"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 To run the script to generate the graphs inn
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "doi:10.1145/3699958"
literal "false"

\end_inset

, run it with no arguments or with the arguments
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

replication(kalmanFactory('KalmanUltimate'), ...
\end_layout

\begin_layout Plain Layout

    false, ...
\end_layout

\begin_layout Plain Layout

    { kalmanFactory('KalmanUltimate'), ...
\end_layout

\begin_layout Plain Layout

      kalmanFactory('KalmanJava'),     ...
\end_layout

\begin_layout Plain Layout

      kalmanFactory('KalmanNative')    ...
\end_layout

\begin_layout Plain Layout

    });
\end_layout

\end_inset

To test another implementation, run it with another factory as the first
 argument, as in 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

replication(kalmanFactory('KalmanNative',struct('algorithm','Ultimate')));
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:performance-testing"

\end_inset

Support for Performance Testing
\end_layout

\begin_layout Standard
All the implementations include a method, called 
\family typewriter
perftest
\family default
, designed for testing the performance of the filter.
 This method accepts as arguments all the matrices and vectors that are
 part of the evolution and observation equations, a step count, and an integer
 
\begin_inset Formula $d$
\end_inset

 that tells the method how often to take a wall-clock timestamp.
 The method assumes that the filter has not been used yet and executes the
 filter for the given number of steps.
 In each step, the state is evolved and observed, the state estimate is
 requested, and the previous step (if there was one) is forgotten.
 The same fixed matrices and vectors are used in all steps.
\end_layout

\begin_layout Standard
This method allows us to measure the performance of all the implementations
 without the overheads associated with calling 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 or 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 from 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

.
 That is, the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 functions are called in a loop from 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

, the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 methods are called from 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

, and the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 methods from 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The method takes a timestamp every 
\begin_inset Formula $d$
\end_inset

 steps and returns a vector with the average wall-clock running time per
 step in each nonoverlapping group of 
\begin_inset Formula $d$
\end_inset

 steps.
\end_layout

\begin_layout Standard
The function 
\family typewriter
performance
\family default
 uses the 
\family typewriter
perftest
\family default
 method to measure and plot the performance of one or more filters/smoothers.
 You invoke it on a cell array of factories and provide several parameters:
 a seed for the random-number generator, an array of state dimensions to
 test, the number of state in each test, and the number of time steps between
 timestamps.
 Graphs produced by this function are presented in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "doi:10.1145/3699958"
literal "false"

\end_inset

.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:step-data-structure"

\end_inset

Data Structures for the Step Sequence
\end_layout

\begin_layout Standard
The information in this section helps to understand the implementations,
 but is essentially irrelevant to users of 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
UltimateKalman
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
Java
\end_layout

\end_inset

 implementation uses an 
\family typewriter
ArrayList
\family default
 data structure to represent the sequence of steps that have not been forgotten
 or rolled back, along with an integer that specifies the step number of
 the first step in the 
\family typewriter
ArrayList
\family default
.
 The data structure allows 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
UltimateKalman
\end_layout

\end_inset

 to add steps, to trim the sequence from both sides, and to access a particular
 step, all in constant time or amortized constant time.
\end_layout

\begin_layout Standard
The 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 implementation uses a specialized data structure with similar capabilities.
 This data structure, called in the code 
\family typewriter
farray_t
\family default
, is part of 
\begin_inset Flex Pkg
status open

\begin_layout Plain Layout
UltimateKalman
\end_layout

\end_inset

.
 The sequence is stored in an array.
 When necessary, the size of the array is doubled.
 The active part of the array is not necessarily in the beginning, if steps
 have been forgotten.
 When a step is added and there is no room at the end of the physical array,
 then either the array is reallocated at double its current size, or the
 active part is shifted to the beginning.
 This allows the data structure to support appending, trimming from both
 sides, and direct access to a step with a given index, again in constant
 or amortized constant time.
\end_layout

\begin_layout Standard
The 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
MATLAB
\end_layout

\end_inset

 implementation stores the steps in a cell array.
 The implementation is simple, but not as efficient as the data structure
 that is used by the 
\begin_inset Flex Proglang
status open

\begin_layout Plain Layout
C
\end_layout

\end_inset

 version.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "kalman"
options "plainurl"

\end_inset


\end_layout

\end_body
\end_document
